name: boinc
base: core20
version: "7.21.0"
summary: BOINC lets you help cutting-edge science research using your computer.
description: |
  BOINC lets you help cutting-edge science research using your computer. The BOINC app, running on your computer, downloads scientific computing jobs and runs them invisibly in the background. It's easy and safe.
  About 30 science projects use BOINC. They investigate diseases, study climate change, discover pulsars, and do many other types of scientific research.
  The BOINC and Science United projects are located at the University of California, Berkeley and are supported by the National Science Foundation.

grade: devel # must be 'stable' to release into candidate/stable channels
confinement: devmode # use 'strict' once you have the right plugs and slots

apps:

  boinc:
    command: usr/bin/boinc --dir $HOME
    plugs:
    - network
    - network-bind

  client:
    command: usr/bin/boinc --dir $HOME
    plugs:
    - network
    - network-bind

  manager:
    environment:
      XAUTHORITY: $SNAP_REAL_HOME/.Xauthority
    command: usr/bin/boincmgr --datadir $HOME
    extensions:
    - gnome-3-38
    plugs:
    - network
    - network-bind
    slots:
      - dbus-daemon
    common-id: boinc.manager

slots:
  dbus-daemon:
    interface: dbus
    bus: session
    name: boinc.manager

parts:
  boinc:
    build-packages:
    - libftgl-dev 
    - freeglut3-dev
    - libxmu-dev
    - libxi-dev
    - libfcgi-dev 
    - libxss-dev 
    - libxcb-util0-dev
    - libxxf86vm-dev 
    - libjpeg-dev
    # vcpkg
    - build-essential
    - pkg-config
    - tar
    - curl
    - zip
    - unzip
    - git
    # awscli
    - libffi-dev
    - python3-pip
    - python3-dev
    - musl-dev    
    - rustc
    - cargo
    - libssl-dev
    - asn1c
    # wxwidgets
    # - wget
    - libsystemd-dev
    build-snaps:
    - cmake
    stage-packages:
    - freeglut3-dev
    - libxss-dev
    source: .
    plugin: autotools
    build-environment:
    - CRYPTOGRAPHY_DONT_BUILD_RUST: "1"
    - triplet: "$triplet"
    - VCPKG_DIR: "$PWD/3rdParty/linux/vcpkg/installed/$triplet"
    - _libcurl_pc: "$PWD/3rdParty/linux/vcpkg/installed/$triplet/lib/pkgconfig/libcurl.pc"
    - VCPKG_BINARY_SOURCES: "$VCPKG_BINARY_SOURCES"
    - AWS_ACCESS_KEY_ID: "$AWS_ACCESS_KEY_ID"
    - AWS_SECRET_ACCESS_KEY: "$AWS_SECRET_ACCESS_KEY"
    - AWS_DEFAULT_REGION: "$AWS_DEFAULT_REGION"
    - prefix: /usr
    autotools-configure-parameters:
    - --prefix=$prefix
    - --with-libcurl=$VCPKG_DIR
    - --with-ssl=$VCPKG_DIR
    - --with-wx-config=$VCPKG_DIR/tools/wxwidgets/wx-config
    - --enable-client
    - --enable-manager
    - --disable-server
    - GTK_LIBS="`pkg-config --libs gtk+-3.0 webkit2gtk-4.0 x11` -lgmodule-2.0 -ldl -lffi -lpcre -lmount -lselinux -lresolv -lz -lpcre2-32"
    override-build: |
      # definitions for the build
      aws_version=$(cat 3rdParty/vcpkg_ports/aws_version.txt)
      aws_cache=3rdParty/buildCache/linux/awscli

      ninja_version=$(cat 3rdParty/vcpkg_ports/ninja_version.txt)
      ninja_cache=3rdParty/buildCache/linux/ninja

      # cmake
      export PATH=/snap/cmake/current/bin/:$PATH

      # aws
      mkdir -p $HOME/.cargo
      mount -t tmpfs none $HOME/.cargo
      export PATH=$HOME/.local/bin:$PATH
      pip install -U --user pip
      if [ ! -d "$aws_cache" ]; then
        mkdir -p $aws_cache
        pip wheel git+https://github.com/aws/aws-cli@$aws_version --wheel-dir $aws_cache
      fi
      pip install --user --find-links $aws_cache awscli

      # ninja
      if [ ! -d "$ninja_cache" ]; then
        mkdir -p $ninja_cache
        git clone -b $ninja_version https://github.com/ninja-build/ninja
        cmake ninja -B$ninja_cache -DBUILD_TESTING=OFF
        cmake --build $ninja_cache
      fi
      export PATH=$PWD/$ninja_cache:$PATH

      linux/update_vcpkg_manager.sh $triplet
      ./_autosetup
      snapcraftctl build
    filesets:
      all:
      - "*"
    prime:
    - $all
