name: Snap
on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master
  schedule:
  - cron:  '10 12 * * 0'

concurrency: 
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}
  AWS_DEFAULT_REGION: us-west-2

jobs:
  docker_build:
    name: snap-${{ matrix.type }}-build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
        - type: x64
          architecture: amd64
          snap_file: boinc_amd64.snap
          triplet: x64-linux-snap
          host_triplet: x64-linux-snap
          compilers: ""
          pkg_config_path: ""
          config_host: "x86_64-pc-linux-gnu"
          boinc_platform: "x86_64-pc-linux-gnu"
          alt_platform: ""
        - type: arm64
          architecture: arm64
          snap_file: boinc_arm64.snap
          triplet: arm64-linux-snap
          host_triplet: x64-linux-snap
          compilers: gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu
          pkg_config_path: /usr/lib/aarch64-linux-gnu/pkgconfig/
          config_host: aarch64-linux-gnu
          boinc_platform: aarch64-unknown-linux-gnu
          alt_platform: arm-unknown-linux-gnueabihf
        - type: arm
          architecture: armhf
          snap_file: boinc_armhf.snap
          triplet: arm-linux-snap
          host_triplet: x64-linux-snap
          compilers: gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf binutils-arm-linux-gnueabihf
          pkg_config_path: /usr/lib/arm-linux-gnueabihf/pkgconfig/
          config_host: arm-linux-gnueabihf
          boinc_platform: arm-unknown-linux-gnueabihf
          alt_platform: ""

    env:
      triplet: ${{ matrix.triplet }}
      host_triplet: ${{ matrix.host_triplet }}
      compilers: ${{ matrix.compilers }}
      arch: ${{ matrix.architecture }}
      config_host: ${{ matrix.config_host }}
      boinc_platform: ${{ matrix.boinc_platform }}
      alt_platform: ${{ matrix.alt_platform }}
      snap_pkg_config_path: ${{ matrix.pkg_config_path }}
      PKG_CONFIG_PATH: ${{ matrix.pkg_config_path }}

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get -qq update
        sudo apt-get install -y p7zip-full

    - name: Running from origin repo
      if: ${{ success() && env.AWS_ACCESS_KEY_ID != 0 && env.AWS_SECRET_ACCESS_KEY != 0 }}
      run: |
        echo "VCPKG_BINARY_SOURCES=clear;x-aws,s3://vcpkg.cache.boinc/,readwrite" >> $GITHUB_ENV

    - name: Running from fork
      if: ${{ success() && (env.AWS_ACCESS_KEY_ID == 0 || env.AWS_SECRET_ACCESS_KEY == 0) }}
      run: |
        echo "VCPKG_BINARY_SOURCES=clear;x-aws-config,no-sign-request;x-aws,s3://vcpkg.cache.boinc/,read" >> $GITHUB_ENV

    - name: Configure docker qemu
      if: success()
      uses: docker/setup-qemu-action@v2

    - name: Install vcpkg dependencies
      run: |
        sudo apt install -y $compilers build-essential pkg-config tar curl zip unzip git bison

        sudo dpkg --add-architecture arm64
        sudo dpkg --add-architecture armhf
        codename=$(lsb_release -cs)
        cat <<EOT >> arm-cross-compile-sources.list
        deb [arch=armhf,arm64] http://ports.ubuntu.com/ $codename main restricted
        deb [arch=armhf,arm64] http://ports.ubuntu.com/ $codename-updates main restricted
        deb [arch=armhf,arm64] http://ports.ubuntu.com/ $codename universe
        deb [arch=armhf,arm64] http://ports.ubuntu.com/ $codename-updates universe
        deb [arch=armhf,arm64] http://ports.ubuntu.com/ $codename multiverse
        deb [arch=armhf,arm64] http://ports.ubuntu.com/ $codename-updates multiverse
        deb [arch=armhf,arm64] http://ports.ubuntu.com/ $codename-backports main restricted universe multiverse
        EOT

        cat /etc/apt/sources.list | sed "s|deb |deb [arch=amd64] |g" > sources.list

        sudo mv arm-cross-compile-sources.list /etc/apt/sources.list.d/
        sudo mv sources.list /etc/apt/        
        sudo apt update
    
        # at-spi2-core
        # cairo
        # cairo others
        # gtk
        sudo apt install -y \
            libdbus-1-dev:$arch \
            libxi-dev:$arch \
            libxtst-dev:$arch \
            \
            libx11-dev:$arch \
            libxft-dev:$arch \
            libxext-dev:$arch \
            \
            libxrender-dev:$arch \
            libxcb1-dev:$arch \
            libxcb-render0-dev:$arch \
            libspectre-dev:$arch \
            \
            libxkbcommon-dev:$arch \
            libxrandr-dev:$arch

    - name: vcpkg libs
      if: success()
      run: |
        linux/update_vcpkg_manager.sh --triplet $triplet --host_triplet $host_triplet

    - name: Build boinc snap
      if: success()
      run: |
        sudo snap install snapcraft --classic
        sudo -E snapcraft \
          --verbosity verbose \
          pack \
          --destructive-mode \
          --output ${{ matrix.snap_file }} \
          --build-for ${{ matrix.architecture }}

        sudo chown $USER ${{ matrix.snap_file }}

    - name: Install and test snap boinc x64
      if: success() && matrix.type == 'x64'
      run: |
        sudo snap install --devmode ${{ matrix.snap_file }}
        boinc --version
        boinc.client --version

    - name: Prepare logs on failure
      if: ${{ failure() }}
      run: |
        python ./deploy/prepare_deployment.py logs

    - name: Upload logs on failure
      if: ${{ failure() }}
      uses: actions/upload-artifact@v3
      with:
        name: snap_logs_${{ matrix.type }}_${{ github.event.pull_request.head.sha }}
        path: deploy/logs.7z

    - name: Prepare artifacts for deploy
      if: success() 
      run: python ./deploy/prepare_deployment.py linux_snap

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: linux_snap_${{ matrix.type }}_${{ github.event.pull_request.head.sha }}
        path: deploy/linux_snap.7z
