name: Windows
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron:  '15 12 * * 0'

jobs:
  build:
    name: ${{ matrix.configuration }}-${{ matrix.platform }}-${{ matrix.year }}-build
    runs-on: windows-latest
    strategy:
      matrix:
        platform: [x64]
        configuration: [Release]
        year: [2013,2019]
      fail-fast: false
    env:
      VCPKG_BINARY_SOURCES: 'clear;files,${{ github.workspace }}\3rdParty\buildCache\windows\vcpkgcache\,readwrite'
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Download OpenCppCoverage
        uses: suisei-cn/actions-download-file@v1
        id: DownloadOpenCppCoverage
        with:
          url: "https://opencppcoverage.gallerycdn.vsassets.io/extensions/opencppcoverage/opencppcoverageplugin/0.9.7.1/1581265346391/OpenCppCoverage-0.9.7.1.vsix"
          target: ${{ github.workspace }}\temp\

      - name: Unzip OpenCppCoverage
        uses: DuckSoft/extract-7z-action@v1.0
        with:
          pathSource: ${{ github.workspace }}\temp\OpenCppCoverage-0.9.7.1.vsix
          pathTarget: ${{ github.workspace }}\temp\OpenCppCoverage
        
      - name: Setup msbuild
        uses: microsoft/setup-msbuild@v1

      - name: Download vs2013 iso
        if: matrix.year == '2013'
        run: |
            curl.exe --output ${{ github.workspace }}\temp\vs2013.5.iso  http://download.microsoft.com/download/A/F/9/AF95E6F8-2E6E-49D0-A48A-8E918D7FD768/vs2013.5.iso
            7z.exe x ${{ github.workspace }}\temp\vs2013.5.iso -o${{ github.workspace }}\temp\vs2013.5 


#      - name: Unzip vs2013 iso
#        uses: DuckSoft/extract-7z-action@v1.0
#        if: matrix.year == '2013'
#        with:
#          pathSource: ${{ github.workspace }}\temp\vs2013.5.iso
#          pathTarget: ${{ github.workspace }}\temp\vs2013.5

      - name: Install vs 2013
        if: matrix.year == '2013'
        run: ${{ github.workspace }}\temp\vs2013.5\VS2013.5.EXE --installPath "C:\Program Files (x86)\Microsoft Visual Studio\2013\BuildTools" --quiet --wait --norestart

      # - name: Setup msbuild 2013
      #   if: matrix.year == '2013'
      #   uses: microsoft/setup-msbuild@v1.0.2
      #   with:
      #     vs-version: '12.0.40629.0'

      - name: Fix vcpkg
        run: vcpkg.exe integrate remove

      - name: Cache dependencies
        uses: actions/cache@v2.1.3
        with:
          path: |
            ${{ github.workspace }}\3rdParty\Windows\cuda\
          key: windows-${{ matrix.platform }}-${{ matrix.configuration }}-${{ hashFiles('win_build/vcpkg_3rdparty_dependencies_vs2019.vcxproj') }}
          restore-keys: windows-${{ matrix.platform }}-${{ matrix.configuration }}-

      - name: Configure Python
        if: ${{ success() }}
        shell: cmd
        run: |
          pip install boto3

      - name: Download vcpkg binary cache
        if: success() && matrix.year == '2019'
        shell: cmd
        run: |
          python deploy\manage_vcpkg_archive_cache.py download ${{ github.workspace }}\3rdParty\buildCache\windows\vcpkgcache\ windows "edu.berkeley.boinc.github.actions.build.vcpkg.binary.cache"

      - name: Build 2019
        if:  matrix.year == '2019'
        run: msbuild win_build\boinc_vs2019.sln -p:Configuration=${{ matrix.configuration }} -p:Platform=${{ matrix.platform }} -p:VcpkgTripletConfig=ci -m

      - name: Download 2013 dependencies
        if: matrix.year == '2013'
        shell: cmd
        run: |
          del ${{ github.workspace }}\temp\vs2013.5.iso
          del /q/s ${{ github.workspace }}\temp\vs2013.5
          curl --output boinc_depends_win_vs2013.zip https://boinc.berkeley.edu/dl/boinc_depends/boinc_depends_win_vs2013.zip
          7z.exe x boinc_depends_win_vs2013.zip -o%CD%\..

      - name: Build 2013
        if: matrix.year == '2013'
        run: msbuild win_build\boinc_vs2013.sln -p:Configuration=${{ matrix.configuration }} -p:Platform=${{ matrix.platform }}

      - name: Run tests
        if:  matrix.year == '2019'
        working-directory: win_build\Build\${{ matrix.platform }}\${{ matrix.configuration }}
        run: ${{ github.workspace }}\temp\OpenCppCoverage\OpenCppCoverage-x64\OpenCppCoverage.exe --cover_children --optimized_build --sources ${{ github.workspace }} --export_type=cobertura:cobertura.xml -- unittests.exe --gtest_output=xml:gtest.xml

      - name: Prepare logs on failure
        if: ${{ failure() }}
        run: |
          7z.exe a -t7z -mx=9 deploy/logs.7z -r0 3rdParty/Windows/vcpkg/buildtrees/*.log
      
      - name: Upload logs on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: windows_logs_${{ matrix.type }}_${{ github.event.pull_request.head.sha }}
          path: deploy/logs.7z

      - name: Prepare artifacts for deploy
        if: ${{ success() }}
        env:
          PULL_REQUEST: ${{ github.event.number }}
          PULL_REQUEST_SHA: ${{ github.event.pull_request.head.sha }}
          platform: ${{ matrix.platform }}
          configuration: ${{ matrix.configuration }}
        shell: cmd
        run: call deploy\prepare_deployment.bat

      - uses: actions/upload-artifact@v2
        with:
          name: win_apps_${{ github.event.pull_request.head.sha }}
          path: deploy/win_apps/*.7z
      - uses: actions/upload-artifact@v2
        with:
          name: win_client_${{ github.event.pull_request.head.sha }}
          path: deploy/win_client/*.7z
      - uses: actions/upload-artifact@v2
        with:
          name: win_manager_${{ github.event.pull_request.head.sha }}
          path: deploy/win_manager/*.7z
      
      - name: Upload coverage report
        uses: codecov/codecov-action@v1
        if: success()
        with:
          fail_ci_if_error: true
          verbose: false

      - name: Upload vcpkg binary cache
        if: ${{ success() }}
        shell: cmd
        env:
          ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
        run: |
          python deploy\manage_vcpkg_archive_cache.py upload ${{ github.workspace }}\3rdParty\buildCache\windows\vcpkgcache\ windows "edu.berkeley.boinc.github.actions.build.vcpkg.binary.cache" "%ACCESS_KEY%" "%SECRET_KEY%"          
